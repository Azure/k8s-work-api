## @param global namespace for fleet work-api resources
global:
  namespace: "fleet-system"

## @param image.registry fleet controller image registry
## @param image.repository fleet controller image repository
## @param image.tag fleet controller image tag
## @param image.pullPolicy fleet controller image pull policy
image:
  registry: ghcr.io
  repository: Azure/k8s-work-api
  tag: "master"
  pullPolicy: Always

## @param replicaCount count of the replicas for the controller deployment
replicaCount: 1

## @param serviceAccount.create work-api helm chart service account setup boolean
## @param serviceAccount.name work-api helm chart service account name
serviceAccount:
  create: true
  annotations: {}
  name: "work-controller-sa"

## @param podAnnotation.prometheus.io prometheus setup configuration
podAnnotations: {
  prometheus.io/scrape: "true",
  prometheus.io/path: "/metrics",
  prometheus.io/port: "8080"
}


securityContext: {
    allowPrivilegeEscalation: false,
    capabilities: {
        drop: [
          ALL
        ]
    },
    privileged : false
}

## @param service.type fleet image controller service type
## @param service.port fleet image controller service port
service:
  type: ClusterIP
  port: 8080

## @param kubeconfig base64 encoded hub-cluster kubeconfig
kubeconfig: 